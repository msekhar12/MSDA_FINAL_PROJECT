--Once the data set is downloaded from https://data.cityofnewyork.us/Health/DOHMH-New-York-City-Restaurant-Inspection-Results/xx67-kt59, I performed the following modifications, and the modified data set is named as "Modified_Data_Set.csv". In my machine, this data set is stored at C:\XXXX\Project_Final". Please modify the location appropriately.


--Deleting rows where the inspection date is 01/01/1900
--Deleting rows where the inspection date is blank
--Deleting all columns, except the following:
--CAMIS	DBA	BORO CUISINE_DESCRIPTION
--INSPECTION_DATE ACTION VIOLATION_CODE VIOLATION_DESCRIPTION	CRITICAL FLAG	SCORE



--This code also outputs the following CSV files:
--C:\XXXX\violation_codes.txt
--C:\XXXX\inspection.txt



--Changing the cusine type (Caf√É¬©/ and Caf√©/ to none)

--DUMPING ALL THE DATA TO A TABLE




DROP TABLE IF EXISTS ALL_DATA_DUMP CASCADE;

CREATE TABLE ALL_DATA_DUMP
(
CAMIS INTEGER,
DBA CHAR(150),
BORO CHAR(150),
CUISINE CHAR(150),
INSPECTION_DATE DATE,
ACTION VARCHAR(500),
VIOLATION_CODE CHAR(4),
VIOLATION_DESCRIPTION VARCHAR(1000),
CRITICAL CHAR(100),
SCORE CHAR(5)
);


COPY ALL_DATA_DUMP(
CAMIS,
DBA,
BORO,
CUISINE,
INSPECTION_DATE,
ACTION,
VIOLATION_CODE,
VIOLATION_DESCRIPTION,
CRITICAL,
SCORE 
)

FROM 'C:\XXXX\Modified_Data_Set.csv' 
with DELIMITER ',' encoding 'LATIN1' CSV HEADER;


--WHEREEVER THE VIOLATION_CODE is NULL, it is regarded as no-violation.
--Update this with 000 to 

UPDATE ALL_DATA_DUMP 
SET VIOLATION_CODE = '000'
WHERE VIOLATION_CODE IS NULL;

UPDATE ALL_DATA_DUMP 
SET VIOLATION_DESCRIPTION = 'NONE FOUND'
WHERE VIOLATION_CODE = '000';

--WHEREEVER THE VIOLATION_CODE is 22F, it is regarded as OTHER VIOLATIONS FOUND (MORE THAN ONE).
--Update this with 22F Desc with OTHER VIOLATIONS FOUND to 

UPDATE ALL_DATA_DUMP 
SET VIOLATION_DESCRIPTION = 'OTHER VIOLATION TYPES FOUND'
WHERE VIOLATION_CODE = '22F';

DROP TABLE IF EXISTS RESTAURANT CASCADE;

CREATE TABLE RESTAURANT(ID INTEGER NOT NULL, NAME CHAR(150) NOT NULL, CONSTRAINT RESTAURANT_PK PRIMARY KEY(ID));

--INSERTING DATA INTO RESTAURANT.
--ONE RESTAURANT (41185251, is having two names - "CAF√? GUSTO", and "CAF√?√? GUSTO". So selecting MAX(DBA) in the following query, to fetch only one restaurant

INSERT INTO RESTAURANT(ID, NAME) 
SELECT DISTINCT CAMIS, DBA FROM 
(SELECT CAMIS, MAX(DBA) AS DBA FROM ALL_DATA_DUMP GROUP BY CAMIS) AS A;

--THERE ARE 24566 RESTAURANTS DATA 
SELECT * FROM RESTAURANT;


SELECT DISTINCT CAMIS, DBA FROM ALL_DATA_DUMP WHERE CAMIS = 41185251;
SELECT * FROM ALL_DATA_DUMP FETCH FIRST 10 ROWS ONLY;

DROP TABLE IF EXISTS CUISINE CASCADE;

CREATE TABLE CUISINE (ID INTEGER NOT NULL, NAME CHAR(150), CONSTRAINT CUISINE_PK PRIMARY KEY(ID));

SELECT row_number() OVER () AS ID, CUISINE
FROM (SELECT DISTINCT CUISINE FROM ALL_DATA_DUMP ORDER BY 1) AS A;

INSERT INTO CUISINE 
SELECT row_number() OVER () AS ID, CUISINE
FROM (SELECT DISTINCT CUISINE FROM ALL_DATA_DUMP ORDER BY 1) AS A;


SELECT * FROM CUISINE;

DROP TABLE IF EXISTS RESTAURANT_CUISINE CASCADE;

CREATE TABLE RESTAURANT_CUISINE
(RESTAURANT_ID INTEGER NOT NULL, CUISINE_ID INTEGER NOT NULL, CONSTRAINT RESTAURANT_CUISINE_PK PRIMARY KEY (RESTAURANT_ID, CUISINE_ID), CONSTRAINT FK_1 FOREIGN KEY(RESTAURANT_ID)
 REFERENCES RESTAURANT(ID), CONSTRAINT FK_2 FOREIGN KEY(CUISINE_ID) REFERENCES CUISINE(ID)
 );

INSERT INTO RESTAURANT_CUISINE
SELECT DISTINCT B.CAMIS AS RESTAURANT_ID, 
A.ID CUSINE_ID
FROM
CUISINE A, ALL_DATA_DUMP B
WHERE A.NAME = B.CUISINE;

--TO GET ALL THE RESTAURANTS, AND THEIR CUISINES, USE THIS QUERY
SELECT A.ID, A.NAME, B.ID, B.NAME 
FROM 
RESTAURANT A, CUISINE B, RESTAURANT_CUISINE C
WHERE A.ID = C.RESTAURANT_ID AND 
B.ID = C.CUISINE_ID;

DROP TABLE IF EXISTS VIOLATION;
CREATE TABLE VIOLATION(CODE CHAR(4) NOT NULL, DESCRIPTION  VARCHAR(1000), LEVEL CHAR(50) NOT NULL, CONSTRAINT VIOLATION_PK PRIMARY KEY(CODE));

INSERT INTO VIOLATION(
SELECT DISTINCT VIOLATION_CODE, MAX(VIOLATION_DESCRIPTION) VIOLATION_DESCRIPTION, 
MAX(CRITICAL) AS CRITICAL 
FROM ALL_DATA_DUMP 
--WHERE (VIOLATION_CODE <> ''  
--AND CRITICAL <> 'Not Applicable'
--) 
GROUP BY VIOLATION_CODE
);

SELECT * FROM VIOLATION ORDER BY 1;

SELECT * FROM ALL_DATA_DUMP FETCH FIRST 10 ROWS ONLY;

DROP TABLE IF EXISTS INSPECTION CASCADE;

CREATE TABLE INSPECTION
(RESTAURANT_ID INTEGER NOT NULL,
INSPECTION_DATE DATE NOT NULL,
CLOSED INTEGER NOT NULL,
VIOLATION_CODE CHAR(4) NOT NULL, 
SCORE INTEGER,
CONSTRAINT INSPECTION_PK PRIMARY KEY(RESTAURANT_ID, INSPECTION_DATE, CLOSED, VIOLATION_CODE),
CONSTRAINT FK_1 FOREIGN KEY(RESTAURANT_ID) REFERENCES RESTAURANT(ID),
CONSTRAINT FK_2 FOREIGN KEY(VIOLATION_CODE) REFERENCES VIOLATION(CODE)
);

INSERT INTO INSPECTION
(

SELECT CAMIS, INSPECTION_DATE, CLOSED, VIOLATION_CODE, MAX(SCORE) SCORE
FROM
(SELECT  DISTINCT CAMIS, INSPECTION_DATE,
CASE WHEN(POSITION('CLOSED' IN UPPER(ACTION)) > 0) THEN 1
ELSE 0
END AS CLOSED,
VIOLATION_CODE, CAST (SCORE AS INTEGER) AS SCORE
FROM ALL_DATA_DUMP
) AS A 
GROUP BY CAMIS, INSPECTION_DATE, VIOLATION_CODE, CLOSED
ORDER BY 1,2 DESC
);


--DELETE DATA FROM INSPECTION WHERE THE SCORE IS GIVEN AS 0, BUT THE VIOLATION CODE IS <> '000'. THERE ARE 60 SUCH ROWS
SELECT * FROM INSPECTION 
WHERE VIOLATION_CODE <> '000' AND SCORE = 0;

DELETE FROM INSPECTION 
WHERE VIOLATION_CODE <> '000' AND SCORE = 0;

--DELETE DATA FROM INSPECTION FOR WHICH THE VIOLATION_CODE IS '000', BUT THE SORE IS NOT 0. 
--USUALLY, IF THERE ARE NO VIOLATIONS, THEN THE SCORE IS ZERO
--THERE ARE 18 SUCH ROWS
SELECT * FROM INSPECTION 
WHERE VIOLATION_CODE = '000' AND SCORE <> 0;

DELETE FROM INSPECTION 
WHERE VIOLATION_CODE = '000' AND SCORE <> 0;

--FOR VIOLATION_CODE '000', THE SCORE MUST BE 0. 
SELECT COUNT(*) FROM INSPECTION WHERE VIOLATION_CODE = '000' AND SCORE IS NULL;
--THERE ARE 6517 RECORDS LIKE THAT

UPDATE INSPECTION SET SCORE = 0 WHERE VIOLATION_CODE = '000';

--THERE ARE SOME RECORDS FOR WHICH THE SCORE IS NULL, AND THE VIOLATION_CODE IS NOT '000'

--THERE 24552 SUCH RECORDS. 
SELECT COUNT(*) FROM INSPECTION WHERE SCORE IS NULL 
AND VIOLATION_CODE <> '000';

DELETE FROM INSPECTION WHERE  SCORE IS NULL AND VIOLATION_CODE <> '000';

--THERE ARE SOME RECORDS (181) WHICH HAVE SCORE AS -1. DELETE SUCH RECORDS
SELECT COUNT(*) FROM INSPECTION WHERE SCORE = -1;
DELETE FROM  INSPECTION WHERE SCORE = -1;


SELECT * FROM INSPECTION ORDER BY RESTAURANT_ID, INSPECTION_DATE DESC;

SELECT * FROM INSPECTION 
WHERE RESTAURANT_ID IN
(
SELECT DISTINCT RESTAURANT_ID FROM
INSPECTION WHERE CLOSED = 1
)
--FETCH FIRST 10 ROWS ONLY;

SELECT DISTINCT CUISINE FROM ALL_DATA_DUMP;

SELECT DISTINCT VIOLATION_CODE, VIOLATION_DESCRIPTION FROM ALL_DATA_DUMP;

SELECT * FROM ALL_DATA_DUMP 
--FETCH FIRST 10 ROWS ONLY
WHERE VIOLATION_CODE IS NULL


SELECT distinct(critical) FROM ALL_DATA_DUMP 
WHERE 
--VIOLATION_CODE = '22F'
--AND 
SCORE IS NULL 
--AND CRITICAL = 'Critical'
--FETCH FIRST 10 ROWS ONLY


SELECT RESTAURANT_ID AS RID, INSPECTION_DATE, CLOSED, VIOLATION_CODE, SCORE FROM INSPECTION FETCH FIRST 10 ROWS ONLY;


--TESTING: ADD A NEW COLUMN TO INSPECTION (LEVEL), WHERE THE LEVEL REPRESENTS THE NUMBER OF INSPECTION FOR A GIVEN RESTAURANT.
SELECT DENSE_RANK() OVER (PARTITION BY  RESTAURANT_ID ORDER BY INSPECTION_DATE) AS LEVEL, * FROM 
INSPECTION
ORDER BY RESTAURANT_ID, INSPECTION_DATE DESC
;



--TESTING: ADD A NEW COLUMN TO INSPECTION (LEVEL), WHERE THE LEVEL REPRESENTS THE NUMBER OF INSPECTION FOR A GIVEN RESTAURANT.
SELECT DENSE_RANK() OVER (PARTITION BY  RESTAURANT_ID ORDER BY INSPECTION_DATE) AS LEVEL, * FROM 
INSPECTION
WHERE
RESTAURANT_ID IN
(SELECT DISTINCT RESTAURANT_ID FROM INSPECTION WHERE
 CLOSED = 1)
;


--CREATING THE INSPECTION CSV FILE

SELECT * FROM INSPECTION FETCH FIRST 10 ROWS ONLY;
SELECT DISTINCT VIOLATION_CODE FROM INSPECTION;

--DELETE THE VIOLATION_CODE=22F RECORDS, SINCE THESE ARE RELATED TO CODE, WHICH STATES THAT AT LEAST ONE MORE VIOLATION IS CITED, AND THIS IS NOT REALLY PRESENT STRICTLY 
--FOR ALL THE CITED RESTAURANTS
DELETE FROM INSPECTION WHERE VIOLATION_CODE = '22F';

SELECT DENSE_RANK() OVER (PARTITION BY  RESTAURANT_ID ORDER BY INSPECTION_DATE) AS LEVEL, * FROM 
(
SELECT A.RESTAURANT_ID, CUISINE_ID, INSPECTION_DATE, CLOSED, VIOLATION_CODE, SCORE FROM 
INSPECTION A, RESTAURANT_CUISINE B WHERE A.RESTAURANT_ID = B.RESTAURANT_ID 
) AS T
ORDER BY RESTAURANT_ID,INSPECTION_DATE DESC
;


SELECT DENSE_RANK() OVER (PARTITION BY  RESTAURANT_ID ORDER BY INSPECTION_DATE) AS LEVEL, * FROM 
INSPECTION
ORDER BY RESTAURANT_ID, INSPECTION_DATE DESC
;


COPY ( SELECT DENSE_RANK() OVER (PARTITION BY  RESTAURANT_ID ORDER BY INSPECTION_DATE) AS VISIT_LEVEL, * FROM 
(
SELECT A.RESTAURANT_ID, CUISINE_ID, INSPECTION_DATE, CLOSED, VIOLATION_CODE, SCORE FROM 
INSPECTION A, RESTAURANT_CUISINE B WHERE A.RESTAURANT_ID = B.RESTAURANT_ID 
) AS T
ORDER BY RESTAURANT_ID,INSPECTION_DATE DESC

) TO 'C:\XXXX\inspection.txt' WITH  CSV HEADER;


select count(*) from all_data_dump;

select DISTINCT B.VIOLATION_CODE, A.DESCRIPTION, LEVEL from violation A, INSPECTION B
WHERE A.CODE = B.VIOLATION_CODE ORDER BY 3;

SELECT DISTINCT SUBSTRING(CODE FROM 3 FOR 1)||SUBSTRING(CODE FROM 1 FOR 2), DESCRIPTION, LEVEL FROM VIOLATION;


COPY ( SELECT * FROM CUISINE

) TO 'C:\XXXX\cuisine.txt' WITH  CSV HEADER;


COPY ( SELECT * FROM VIOLATION

) TO 'C:\XXXX\violation_codes.txt' WITH  CSV HEADER;

